default_platform(:android)

platform :android do
  desc "Build and sign APK for F-Droid"
  lane :fdroid_release do
    gradle(task: "clean assembleRelease")

    unsigned_apk = File.expand_path("../app/build/outputs/apk/release/app-release-unsigned.apk")
    aligned_apk = File.expand_path("../app/build/outputs/apk/release/app-release-aligned.apk")
    signed_apk = File.expand_path("../app/build/outputs/apk/release/app-release-signed.apk")

    # Wait to avoid zipalign error due to race condition
    sleep(1)

    unless File.exist?(unsigned_apk)
      UI.user_error!("‚ùå APK not found at: #{unsigned_apk}")
    end

    # Align the APK
    sh("zipalign -v -p 4 #{unsigned_apk} #{aligned_apk}")

    keystore_path = File.expand_path(ENV["KEYSTORE_PATH"])
    key_alias = ENV["KEY_ALIAS"]
    keystore_password = ENV["KEYSTORE_PASSWORD"]
    key_password = ENV["KEY_PASSWORD"]

    sh "apksigner sign " \
       "--ks #{keystore_path} " \
       "--ks-key-alias #{key_alias} " \
       "--ks-pass pass:#{keystore_password} " \
       "--key-pass pass:#{key_password} " \
       "--out #{signed_apk} #{aligned_apk}"


    # Optional: verify signature
    sh("apksigner verify #{signed_apk}")

    # Calculate SHA256 for F-Droid
    require 'digest'
    sha256 = Digest::SHA256.file(signed_apk).hexdigest
    puts("üîê SHA256: #{sha256}")

    # Optional: append to F-Droid metadata
    metadata_path = "metadata/com.example.app.txt" # Replace with actual
    if File.exist?(metadata_path)
      File.open(metadata_path, "a") do |file|
        file.puts("Distribution SHA256: #{sha256}")
      end
    end

    # Organize output
    sh("mkdir -p release")
    sh("cp #{signed_apk} release/")

    UI.success("‚úÖ F-Droid APK built and signed: release/app-release-signed.apk")
  end
end
